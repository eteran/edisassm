/*
Copyright (C) 2006 - 2009 Evan Teran
                   eteran@alum.rit.edu

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef OPTABLE_2BYTE_20080314_TCC_
#define OPTABLE_2BYTE_20080314_TCC_

#include "Operand.h"

template <class Model>
const typename Instruction<Model>::OpcodeEntry Instruction<Model>::Opcodes_2Byte_NA[0x100] = {

	/* 0x0f 0x00 - 0x0f 0x0f */
	{ "group6", &Instruction::decode_group6, OP_GROUP6, FLAG_NONE },
	{ "group7", &Instruction::decode_group7, OP_GROUP7, FLAG_NONE },
	{ "lar", &Instruction::decode_Gv_Ew, OP_LAR, FLAG_NONE },
	{ "lsl", &Instruction::decode_Gv_Ew, OP_LSL, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "syscall", &Instruction::decode0, OP_SYSCALL, FLAG_NONE },
	{ "clts", &Instruction::decode0, OP_CLTS, FLAG_NONE },
	{ "sysret", &Instruction::decode0, OP_SYSRET, FLAG_NONE },
	{ "invd", &Instruction::decode0, OP_INVD, FLAG_NONE },
	{ "wbinvd", &Instruction::decode0, OP_WBINVD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "ud2", &Instruction::decode0, OP_UD2, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x10 - 0x0f 0x1f */
	{ "movups", &Instruction::decode_Vo_Wo, OP_MOVUPS, FLAG_NONE },
	{ "movups", &Instruction::decode_Wo_Vo, OP_MOVUPS, FLAG_NONE },
	{ "movlps", &Instruction::decode_Vq_Mq, OP_MOVLPS, FLAG_NONE },
	{ "movlps", &Instruction::decode_Mq_Vq, OP_MOVLPS, FLAG_NONE },
	{ "unpcklps", &Instruction::decode_Vo_Wq, OP_UNPCKLPS, FLAG_NONE },
	{ "unpckhps", &Instruction::decode_Vo_Wq, OP_UNPCKHPS, FLAG_NONE },
	{ "movhps", &Instruction::decode_Vq_Mq, OP_MOVHPS, FLAG_NONE },
	{ "movhps", &Instruction::decode_Mq_Vq, OP_MOVHPS, FLAG_NONE },
	{ "group17", &Instruction::decode_group17, OP_GROUP17, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	
	/* 0x0f 0x20 - 0x0f 0x2f */
	{ "mov", &Instruction::decode_Rd_Cd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Rd_Dd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Cd_Rd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Dd_Rd, OP_MOV, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movaps", &Instruction::decode_Vo_Wo, OP_MOVAPS, FLAG_NONE },
	{ "movaps", &Instruction::decode_Wo_Vo, OP_MOVAPS, FLAG_NONE },
	{ "cvtpi2ps", &Instruction::decode_Vo_Qq, OP_CVTPI2PS, FLAG_NONE },
	{ "movntps",  &Instruction::decode_Mo_Vo, OP_MOVNTPS, FLAG_NONE },	
	{ "cvttps2pi",  &Instruction::decode_Pq_Wo, OP_CVTTPS2PI, FLAG_NONE },
	{ "cvtps2pi",  &Instruction::decode_Pq_Wo, OP_CVTPS2PI, FLAG_NONE },
	{ "ucomiss",  &Instruction::decode_Vo_Wo, OP_UCOMISS, FLAG_NONE },
	{ "comiss",  &Instruction::decode_Vo_Wo, OP_COMISS, FLAG_NONE },
	
	/* 0x0f 0x30 - 0x0f 0x3f */
	{ "wrmsr", &Instruction::decode0, OP_WRMSR, FLAG_NONE },
	{ "rdtsc", &Instruction::decode0, OP_RDTSC, FLAG_NONE },
	{ "rdmsr", &Instruction::decode0, OP_RDMSR, FLAG_NONE },
	{ "rdpmc", &Instruction::decode0, OP_RDPMC, FLAG_NONE },
	{ "sysenter", &Instruction::decode0, OP_SYSENTER, FLAG_NONE },
	{ "sysexit", &Instruction::decode0, OP_SYSEXIT, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "getsec", &Instruction::decode0, OP_GETSEC, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_38, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_3A, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x40 - 0x0f 0x4f */
	{ "cmovo", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovno", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnbe", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovs", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovns", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	
	/* 0x0f 0x50 - 0x0f 0x5f */
	{ "movmskps", &Instruction::decode_Gd_Uo, OP_MOVMSKPS, FLAG_NONE },	// x86-64: movmskps Gq, Uo
	{ "sqrtps", &Instruction::decode_Vo_Wo, OP_SQRTPS, FLAG_NONE },
	{ "rsqrtps", &Instruction::decode_Vo_Wo, OP_RSQRTPS, FLAG_NONE },
	{ "rcpps", &Instruction::decode_Vo_Wo, OP_RCPPS, FLAG_NONE },
	{ "andps", &Instruction::decode_Vo_Wo, OP_ANDPS, FLAG_NONE },
	{ "andnps", &Instruction::decode_Vo_Wo, OP_ANDNPS, FLAG_NONE },
	{ "orps", &Instruction::decode_Vo_Wo, OP_ORPS, FLAG_NONE },
	{ "xorps", &Instruction::decode_Vo_Wo, OP_XORPS, FLAG_NONE },
	{ "addps", &Instruction::decode_Vo_Wo, OP_ADDPS, FLAG_NONE },
	{ "mulps", &Instruction::decode_Vo_Wo, OP_MULPS, FLAG_NONE },
	{ "cvtps2pd", &Instruction::decode_Vo_Wo, OP_CVTPS2PD, FLAG_NONE },
	{ "cvtdq2ps", &Instruction::decode_Vo_Wo, OP_CVTDQ2PS, FLAG_NONE },
	{ "subps", &Instruction::decode_Vo_Wo, OP_SUBPS, FLAG_NONE },
	{ "minps", &Instruction::decode_Vo_Wo, OP_MINPS, FLAG_NONE },
	{ "divps", &Instruction::decode_Vo_Wo, OP_DIVPS, FLAG_NONE },
	{ "maxps", &Instruction::decode_Vo_Wo, OP_MAXPS, FLAG_NONE },
	
	/* 0x0f 0x60 - 0x0f 0x6f */
	{ "punpcklbw", &Instruction::decode_Pq_Qd, OP_PUNPCKLBW, FLAG_NONE },
	{ "punpcklwd", &Instruction::decode_Pq_Qd, OP_PUNPCKLWD, FLAG_NONE },
	{ "punpckldq", &Instruction::decode_Pq_Qd, OP_PUNPCKLDQ, FLAG_NONE },
	{ "packsswb", &Instruction::decode_Pq_Qq, OP_PACKSSWB, FLAG_NONE },
	{ "pcmpgtb", &Instruction::decode_Pq_Qq, OP_PCMPGTB, FLAG_NONE },
	{ "pcmpgtw", &Instruction::decode_Pq_Qq, OP_PCMPGTW, FLAG_NONE },
	{ "pcmpgtd", &Instruction::decode_Pq_Qq, OP_PCMPGTD, FLAG_NONE },
	{ "packuswb", &Instruction::decode_Pq_Qq, OP_PACKUSWB, FLAG_NONE },
	{ "punpckhbw", &Instruction::decode_Pq_Qd, OP_PUNPCKHBW, FLAG_NONE },
	{ "punpckhwd", &Instruction::decode_Pq_Qd, OP_PUNPCKHWD, FLAG_NONE },
	{ "punpckhdq", &Instruction::decode_Pq_Qd, OP_PUNPCKHDQ, FLAG_NONE },
	{ "packssdw", &Instruction::decode_Pq_Qq, OP_PACKSSDW, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movd", &Instruction::decode_Pd_Ed, OP_MOVD, FLAG_NONE },		// x86-64: movq Pd, Eq
	{ "movq", &Instruction::decode_Pq_Qq, OP_MOVQ, FLAG_NONE },
	
	/* 0x0f 0x70 - 0x0f 0x7f */
	{ "pshufw", &Instruction::decode_Pq_Qq_Ib, OP_PSHUFW, FLAG_NONE },
	{ "group13", &Instruction::decode_group13, OP_GROUP13, FLAG_NONE },
	{ "group14", &Instruction::decode_group14, OP_GROUP14, FLAG_NONE },
	{ "group15", &Instruction::decode_group15, OP_GROUP15, FLAG_NONE },
	{ "pcmpeqb", &Instruction::decode_Pq_Qq, OP_PCMPEQB, FLAG_NONE },
	{ "pcmpeqw", &Instruction::decode_Pq_Qq, OP_PCMPEQW, FLAG_NONE },
	{ "pcmpeqd", &Instruction::decode_Pq_Qq, OP_PCMPEQD, FLAG_NONE },
	{ "emms", &Instruction::decode0, OP_EMMS, FLAG_NONE },
	{ "vmread", &Instruction::decode_Ed_Gd, OP_VMREAD, FLAG_NONE },	// x86-64: vmread Eq, Gq
	{ "vmwrite", &Instruction::decode_Gd_Ed, OP_VMWRITE, FLAG_NONE },	// x86-64: vmwrite Gq, Eq
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movd", &Instruction::decode_Ed_Pd, OP_MOVD, FLAG_NONE },		// x86-64: movq Eq,Pd
	{ "movq", &Instruction::decode_Qq_Pq, OP_MOVQ, FLAG_NONE },
	
	/* 0x0f 0x80 - 0x0f 0x8f */
	{ "jo", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jno", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "js", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jns", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	
	/* 0x0f 0x90 - 0x0f 0x9f */
	{ "seto", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setno", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "sets", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setns", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	
	/* 0x0f 0xa0 - 0x0f 0xaf */
	{ "push", &Instruction::decode_SegFS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegFS, OP_POP, FLAG_NONE },
	{ "cpuid", &Instruction::decode0, OP_CPUID, FLAG_NONE },
	{ "bt", &Instruction::decode_Ev_Gv, OP_BT, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_Ib, OP_SHLD, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_CL, OP_SHLD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "push", &Instruction::decode_SegGS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegGS, OP_POP, FLAG_NONE },
	{ "rsm", &Instruction::decode0, OP_RSM, FLAG_NONE },
	{ "bts", &Instruction::decode_Ev_Gv, OP_BTS, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_Ib, OP_SHRD, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_CL, OP_SHRD, FLAG_NONE },
	{ "group16", &Instruction::decode_group16, OP_GROUP16, FLAG_NONE },
	{ "imul",  &Instruction::decode_Gv_Ev, OP_IMUL, FLAG_NONE },
	
	/* 0x0f 0xb0 - 0x0f 0xbf */
	{ "cmpxchg", &Instruction::decode_Eb_Gb, OP_CMPXCHG, FLAG_NONE },
	{ "cmpxchg", &Instruction::decode_Ev_Gv, OP_CMPXCHG, FLAG_NONE },
	{ "lss", &Instruction::decode_Gv_Mp, OP_LSS, FLAG_NONE },
	{ "btr", &Instruction::decode_Ev_Gv, OP_BTR, FLAG_NONE },
	{ "lfs", &Instruction::decode_Gv_Mp, OP_LFS, FLAG_NONE },
	{ "lgs", &Instruction::decode_Gv_Mp, OP_LGS, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Eb, OP_MOVZX, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Ew, OP_MOVZX, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "group11", &Instruction::decode_group11, OP_GROUP11, FLAG_NONE },
	{ "group8", &Instruction::decode_group8, OP_GROUP8, FLAG_NONE },
	{ "btc", &Instruction::decode_Ev_Gv, OP_BTC, FLAG_NONE },
	{ "bsf", &Instruction::decode_Gv_Ev, OP_BSF, FLAG_NONE },
	{ "bsr", &Instruction::decode_Gv_Ev, OP_BSR, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Eb, OP_MOVSX, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Ew, OP_MOVSX, FLAG_NONE },
	
	/* 0x0f 0xc0 - 0x0f 0xcf */
	{ "xadd", &Instruction::decode_Eb_Gb, OP_XADD, FLAG_NONE },
	{ "xadd", &Instruction::decode_Ev_Gv, OP_XADD, FLAG_NONE },
	{ "cmpps", &Instruction::decode_Vo_Wo_Ib, OP_CMPPS, FLAG_NONE },
	{ "movnti", &Instruction::decode_Md_Gd, OP_MOVNTI, FLAG_NONE },	// x86-64: movnti Nq, Gq
	{ "pinsrw", &Instruction::decode_Pq_Rd_Mw_Ib, OP_PINSRW, FLAG_NONE },	// x86-64: pinsrw Pq, Rq/Mw,Ib
	{ "pextrw", &Instruction::decode_Gd_Nq_Ib, OP_PEXTRW, FLAG_NONE },
	{ "shufps", &Instruction::decode_Vo_Wo_Ib, OP_SHUFPS, FLAG_NONE },
	{ "group9", &Instruction::decode_group9, OP_GROUP9, FLAG_NONE },
	{ "bswap", &Instruction::decode_rAX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rCX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSI, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDI, OP_BSWAP, FLAG_NONE },
	
	/* 0x0f 0xd0 - 0x0f 0xdf */
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "psrlw", &Instruction::decode_Pq_Qq, OP_PSRLW, FLAG_NONE },
	{ "psrld", &Instruction::decode_Pq_Qq, OP_PSRLD, FLAG_NONE },
	{ "psrlq", &Instruction::decode_Pq_Qq, OP_PSRLQ, FLAG_NONE },
	{ "paddq", &Instruction::decode_Pq_Qq, OP_PADDQ, FLAG_NONE },
	{ "pmullw", &Instruction::decode_Pq_Qq, OP_PMULLW, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "pmovmskb", &Instruction::decode_Gd_Nq, OP_PMOVMSKB, FLAG_NONE },
    { "psubusb", &Instruction::decode_Pq_Qq, OP_PSUBUSB, FLAG_NONE },
    { "psubusw", &Instruction::decode_Pq_Qq, OP_PSUBUSW, FLAG_NONE },
    { "pminub", &Instruction::decode_Pq_Qq, OP_PMINUB, FLAG_NONE },
    { "pand", &Instruction::decode_Pq_Qq, OP_PAND, FLAG_NONE },
    { "paddusb", &Instruction::decode_Pq_Qq, OP_PADDUSB, FLAG_NONE },
    { "paddusw", &Instruction::decode_Pq_Qq, OP_PADDUSW, FLAG_NONE },
    { "pmaxub", &Instruction::decode_Pq_Qq, OP_PMAXUB, FLAG_NONE },
    { "pandn", &Instruction::decode_Pq_Qq, OP_PANDN, FLAG_NONE },
	
	/* 0x0f 0xe0 - 0x0f 0xef */
	{ "pavgb", &Instruction::decode_Pq_Qq, OP_PAVGB, FLAG_NONE },
	{ "psraw", &Instruction::decode_Pq_Qq, OP_PSRAW, FLAG_NONE },
	{ "psrad", &Instruction::decode_Pq_Qq, OP_PSRAD, FLAG_NONE },
	{ "pavgw", &Instruction::decode_Pq_Qq, OP_PAVGW, FLAG_NONE },
	{ "pmulhuw", &Instruction::decode_Pq_Qq, OP_PMULHUW, FLAG_NONE },
	{ "pmulhw", &Instruction::decode_Pq_Qq, OP_PMULHW, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movntq", &Instruction::decode_Mq_Pq, OP_MOVNTQ, FLAG_NONE },
	{ "psubsb", &Instruction::decode_Pq_Qq, OP_PSUBSB, FLAG_NONE },
	{ "psubsw", &Instruction::decode_Pq_Qq, OP_PSUBSW, FLAG_NONE },
	{ "pminsw", &Instruction::decode_Pq_Qq, OP_PMINSW, FLAG_NONE },
	{ "por", &Instruction::decode_Pq_Qq, OP_POR, FLAG_NONE },  
	{ "paddsb", &Instruction::decode_Pq_Qq, OP_PADDSB, FLAG_NONE },
	{ "paddsw", &Instruction::decode_Pq_Qq, OP_PADDSW, FLAG_NONE },
	{ "pmaxsw", &Instruction::decode_Pq_Qq, OP_PMAXSW, FLAG_NONE },
	{ "pxor", &Instruction::decode_Pq_Qq, OP_PXOR, FLAG_NONE },
	
	/* 0x0f 0xf0 - 0x0f 0xff */
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "psllw", &Instruction::decode_Pq_Qq, OP_PSLLW, FLAG_NONE },
	{ "pslld", &Instruction::decode_Pq_Qq, OP_PSLLD, FLAG_NONE },
	{ "psllq", &Instruction::decode_Pq_Qq, OP_PSLLQ, FLAG_NONE },
	{ "pmuludq", &Instruction::decode_Pq_Qq, OP_PMULUDQ, FLAG_NONE },
	{ "pmaddwd", &Instruction::decode_Pq_Qq, OP_PMADDWD, FLAG_NONE },
	{ "psadbw", &Instruction::decode_Pq_Qq, OP_PSADBW, FLAG_NONE },
	{ "maskmovq", &Instruction::decode_Pq_Nq, OP_MASKMOVQ, FLAG_NONE },
	{ "psubb", &Instruction::decode_Pq_Qq, OP_PSUBB, FLAG_NONE },
	{ "psubw", &Instruction::decode_Pq_Qq, OP_PSUBW, FLAG_NONE },
	{ "psubd", &Instruction::decode_Pq_Qq, OP_PSUBD, FLAG_NONE },
	{ "psubq", &Instruction::decode_Pq_Qq, OP_PSUBQ, FLAG_NONE },	
	{ "paddb", &Instruction::decode_Pq_Qq, OP_PADDB, FLAG_NONE },
	{ "paddw", &Instruction::decode_Pq_Qq, OP_PADDW, FLAG_NONE },
	{ "paddd", &Instruction::decode_Pq_Qq, OP_PADDD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID }
};


// 2 byte opcodes with a 66 prefix
template <class Model>
const typename Instruction<Model>::OpcodeEntry Instruction<Model>::Opcodes_2Byte_66[0x100] = {
	
	/* 0x0f 0x00 - 0x0f 0x0f */
	{ "group6", &Instruction::decode_group6, OP_GROUP6, FLAG_NONE },
	{ "group7", &Instruction::decode_group7, OP_GROUP7, FLAG_NONE },
	{ "lar", &Instruction::decode_Gv_Ew, OP_LAR, FLAG_NONE },
	{ "lsl", &Instruction::decode_Gv_Ew, OP_LSL, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "syscall", &Instruction::decode0, OP_SYSCALL, FLAG_NONE },
	{ "clts", &Instruction::decode0, OP_CLTS, FLAG_NONE },
	{ "sysret", &Instruction::decode0, OP_SYSRET, FLAG_NONE },
	{ "invd", &Instruction::decode0, OP_INVD, FLAG_NONE },
	{ "wbinvd", &Instruction::decode0, OP_WBINVD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "ud2", &Instruction::decode0, OP_UD2, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x10 - 0x0f 0x1f */
	{ "movupd", &Instruction::decode_Vo_Wo, OP_MOVUPD, FLAG_NONE },
	{ "movupd", &Instruction::decode_Wo_Vo, OP_MOVUPD, FLAG_NONE },
	{ "movlpd", &Instruction::decode_Vq_Mq, OP_MOVLPD, FLAG_NONE },
	{ "movlpd", &Instruction::decode_Mq_Vq, OP_MOVLPD, FLAG_NONE },
	{ "unpcklpd", &Instruction::decode_Vo_Wq, OP_UNPCKLPD, FLAG_NONE },
	{ "unpckhpd", &Instruction::decode_Vo_Wq, OP_UNPCKHPD, FLAG_NONE },
	{ "movhpd", &Instruction::decode_Vq_Mq, OP_MOVHPD, FLAG_NONE },
	{ "movhpd", &Instruction::decode_Mq_Vq, OP_MOVHPD, FLAG_NONE },
	{ "group17", &Instruction::decode_group17, OP_GROUP17, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	
	/* 0x0f 0x20 - 0x0f 0x2f */
	{ "mov", &Instruction::decode_Rd_Cd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Rd_Dd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Cd_Rd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Dd_Rd, OP_MOV, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movapd", &Instruction::decode_Vo_Wo, OP_MOVAPD, FLAG_NONE },
	{ "movapd", &Instruction::decode_Wo_Vo, OP_MOVAPD, FLAG_NONE },
	{ "cvtpi2pd", &Instruction::decode_Vo_Qq, OP_CVTPI2PD, FLAG_NONE },
	{ "movntpd",  &Instruction::decode_Mo_Vo, OP_MOVNTPD, FLAG_NONE },	
	{ "cvttpd2pi",  &Instruction::decode_Pq_Wo, OP_CVTTPD2PI, FLAG_NONE },
	{ "cvtpd2pi",  &Instruction::decode_Qq_Wo, OP_CVTPD2PI, FLAG_NONE },
	{ "ucomisd",  &Instruction::decode_Vo_Wo, OP_UCOMISD, FLAG_NONE },
	{ "comisd",  &Instruction::decode_Vo_Wo, OP_COMISD, FLAG_NONE },
	
	/* 0x0f 0x30 - 0x0f 0x3f */
	{ "wrmsr", &Instruction::decode0, OP_WRMSR, FLAG_NONE },
	{ "rdtsc", &Instruction::decode0, OP_RDTSC, FLAG_NONE },
	{ "rdmsr", &Instruction::decode0, OP_RDMSR, FLAG_NONE },
	{ "rdpmc", &Instruction::decode0, OP_RDPMC, FLAG_NONE },
	{ "sysenter", &Instruction::decode0, OP_SYSENTER, FLAG_NONE },
	{ "sysexit", &Instruction::decode0, OP_SYSEXIT, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "getsec", &Instruction::decode0, OP_GETSEC, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_38, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_3A, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x40 - 0x0f 0x4f */
	{ "cmovo", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovno", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnbe", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovs", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovns", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	
	/* 0x0f 0x50 - 0x0f 0x5f */
	{ "movmskpd", &Instruction::decode_Gd_Uo, OP_MOVMSKPD, FLAG_NONE },	// x86-64: movmskpd Gq, Uo
	{ "sqrtpd", &Instruction::decode_Vo_Wo, OP_SQRTPD, FLAG_NONE },
	{ "rsqrtps", &Instruction::decode_Vo_Wo, OP_RSQRTPS, FLAG_NONE },
	{ "rcpps", &Instruction::decode_Vo_Wo, OP_RCPPS, FLAG_NONE },
	{ "andpd", &Instruction::decode_Vo_Wo, OP_ANDPD, FLAG_NONE },
	{ "andnpd", &Instruction::decode_Vo_Wo, OP_ANDNPD, FLAG_NONE },
	{ "orpd", &Instruction::decode_Vo_Wo, OP_ORPD, FLAG_NONE },
	{ "xorpd", &Instruction::decode_Vo_Wo, OP_XORPD, FLAG_NONE },
	{ "addpd", &Instruction::decode_Vo_Wo, OP_ADDPD, FLAG_NONE },
	{ "mulpd", &Instruction::decode_Vo_Wo, OP_MULPD, FLAG_NONE },
	{ "cvtpd2ps", &Instruction::decode_Vo_Wo, OP_CVTPD2PS, FLAG_NONE },
	{ "cvtps2dq", &Instruction::decode_Vo_Wo, OP_CVTPS2DQ, FLAG_NONE },
	{ "subpd", &Instruction::decode_Vo_Wo, OP_SUBPD, FLAG_NONE },
	{ "minpd", &Instruction::decode_Vo_Wo, OP_MINPD, FLAG_NONE },
	{ "divpd", &Instruction::decode_Vo_Wo, OP_DIVPD, FLAG_NONE },
	{ "maxpd", &Instruction::decode_Vo_Wo, OP_MAXPD, FLAG_NONE },
	
	/* 0x0f 0x60 - 0x0f 0x6f */
	{ "punpcklbw", &Instruction::decode_Vo_Wo, OP_PUNPCKLBW, FLAG_NONE },
	{ "punpcklwd", &Instruction::decode_Vo_Wo, OP_PUNPCKLWD, FLAG_NONE },
	{ "punpckldq", &Instruction::decode_Vo_Wo, OP_PUNPCKLDQ, FLAG_NONE },
	{ "packsswb", &Instruction::decode_Vo_Wo, OP_PACKSSWB, FLAG_NONE },
	{ "pcmpgtb", &Instruction::decode_Vo_Wo, OP_PCMPGTB, FLAG_NONE },
	{ "pcmpgtw", &Instruction::decode_Vo_Wo, OP_PCMPGTW, FLAG_NONE },
	{ "pcmpgtd", &Instruction::decode_Vo_Wo, OP_PCMPGTD, FLAG_NONE },
	{ "packuswb", &Instruction::decode_Vo_Wo, OP_PACKUSWB, FLAG_NONE },
	{ "punpckhbw", &Instruction::decode_Vo_Wo, OP_PUNPCKHBW, FLAG_NONE },
	{ "punpckhwd", &Instruction::decode_Vo_Wo, OP_PUNPCKHWD, FLAG_NONE },
	{ "punpckhdq", &Instruction::decode_Vo_Wo, OP_PUNPCKHDQ, FLAG_NONE },
	{ "packssdw", &Instruction::decode_Vo_Wo, OP_PACKSSDW, FLAG_NONE },
	{ "punpcklqdq", &Instruction::decode_Vo_Wo, OP_PUNPCKLQDQ, FLAG_NONE },
	{ "punpckhqdq", &Instruction::decode_Vo_Wo, OP_PUNPCKHQDQ, FLAG_NONE },
	{ "movd", &Instruction::decode_Vo_Ed, OP_MOVD, FLAG_NONE },		// x86-64: movq Vo, Eq
	{ "movq", &Instruction::decode_Vo_Qq, OP_MOVQ, FLAG_NONE },
	
	/* 0x0f 0x70 - 0x0f 0x7f */
	{ "pshufd", &Instruction::decode_Vo_Wo_Ib, OP_PSHUFD, FLAG_NONE },
	{ "group13", &Instruction::decode_group13, OP_GROUP13, FLAG_NONE },
	{ "group14", &Instruction::decode_group14, OP_GROUP14, FLAG_NONE },
	{ "group15", &Instruction::decode_group15, OP_GROUP15, FLAG_NONE },
	{ "pcmpeqb", &Instruction::decode_Vo_Wo, OP_PCMPEQB, FLAG_NONE },
	{ "pcmpeqw", &Instruction::decode_Vo_Wo, OP_PCMPEQW, FLAG_NONE },
	{ "pcmpeqd", &Instruction::decode_Vo_Wo, OP_PCMPEQD, FLAG_NONE },
	{ "emms", &Instruction::decode0, OP_EMMS, FLAG_NONE },
	{ "vmread", &Instruction::decode_Ed_Gd, OP_VMREAD, FLAG_NONE },	// x86-64: vmread Eq, Gq
	{ "vmwrite", &Instruction::decode_Gd_Ed, OP_VMWRITE, FLAG_NONE },	// x86-64: vmwrite Gq, Eq
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "haddpd", &Instruction::decode_Vo_Wo, OP_HADDPD, FLAG_NONE },
	{ "hsubpd", &Instruction::decode_Vo_Wo, OP_HSUBPD, FLAG_NONE },
	{ "movd", &Instruction::decode_Ed_Vo, OP_MOVD, FLAG_NONE },		// x86-64: movq Eq, Vo
	{ "movdqa", &Instruction::decode_Wo_Vo, OP_MOVDQA, FLAG_NONE },
	
	/* 0x0f 0x80 - 0x0f 0x8f */
	{ "jo", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jno", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "js", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jns", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	
	/* 0x0f 0x90 - 0x0f 0x9f */
	{ "seto", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setno", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "sets", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setns", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	
	/* 0x0f 0xa0 - 0x0f 0xaf */
	{ "push", &Instruction::decode_SegFS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegFS, OP_POP, FLAG_NONE },
	{ "cpuid", &Instruction::decode0, OP_CPUID, FLAG_NONE },
	{ "bt", &Instruction::decode_Ev_Gv, OP_BT, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_Ib, OP_SHLD, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_CL, OP_SHLD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "push", &Instruction::decode_SegGS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegGS, OP_POP, FLAG_NONE },
	{ "rsm", &Instruction::decode0, OP_RSM, FLAG_NONE },
	{ "bts", &Instruction::decode_Ev_Gv, OP_BTS, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_Ib, OP_SHRD, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_CL, OP_SHRD, FLAG_NONE },
	{ "group16", &Instruction::decode_group16, OP_GROUP16, FLAG_NONE },
	{ "imul",  &Instruction::decode_Gv_Ev, OP_IMUL, FLAG_NONE },
	
	/* 0x0f 0xb0 - 0x0f 0xbf */
	{ "cmpxchg", &Instruction::decode_Eb_Gb, OP_CMPXCHG, FLAG_NONE },
	{ "cmpxchg", &Instruction::decode_Ev_Gv, OP_CMPXCHG, FLAG_NONE },
	{ "lss", &Instruction::decode_Gv_Mp, OP_LSS, FLAG_NONE },
	{ "btr", &Instruction::decode_Ev_Gv, OP_BTR, FLAG_NONE },
	{ "lfs", &Instruction::decode_Gv_Mp, OP_LFS, FLAG_NONE },
	{ "lgs", &Instruction::decode_Gv_Mp, OP_LGS, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Eb, OP_MOVZX, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Ew, OP_MOVZX, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "group11", &Instruction::decode_group11, OP_GROUP11, FLAG_NONE },
	{ "group8", &Instruction::decode_group8, OP_GROUP8, FLAG_NONE },
	{ "btc", &Instruction::decode_Ev_Gv, OP_BTC, FLAG_NONE },
	{ "bsf", &Instruction::decode_Gv_Ev, OP_BSF, FLAG_NONE },
	{ "bsr", &Instruction::decode_Gv_Ev, OP_BSR, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Eb, OP_MOVSX, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Ew, OP_MOVSX, FLAG_NONE },
	
	/* 0x0f 0xc0 - 0x0f 0xcf */
	{ "xadd", &Instruction::decode_Eb_Gb, OP_XADD, FLAG_NONE },
	{ "xadd", &Instruction::decode_Ev_Gv, OP_XADD, FLAG_NONE },
	{ "cmppd", &Instruction::decode_Vo_Wo_Ib, OP_CMPPD, FLAG_NONE },
	{ "movnti", &Instruction::decode_Md_Gd, OP_MOVNTI, FLAG_NONE },	// x86-64: movnti Nq, Gq
	{ "pinsrw", &Instruction::decode_Vo_Rd_Mw_Ib, OP_PINSRW, FLAG_NONE },	// x86-64: pinsrw Vo, Rq/Mw,Ib
	{ "pextrw", &Instruction::decode_Gd_Uo_Ib, OP_PEXTRW, FLAG_NONE },
	{ "shufpd", &Instruction::decode_Vo_Wo_Ib, OP_SHUFPD, FLAG_NONE },
	{ "group9", &Instruction::decode_group9, OP_GROUP9, FLAG_NONE },
	{ "bswap", &Instruction::decode_rAX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rCX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSI, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDI, OP_BSWAP, FLAG_NONE },
	
	/* 0x0f 0xd0 - 0x0f 0xdf */
	{ "addsubpd", &Instruction::decode_Vo_Wo, OP_ADDSUBPD, FLAG_NONE },
	{ "psrlw", &Instruction::decode_Vo_Wo, OP_PSRLW, FLAG_NONE },
	{ "psrld", &Instruction::decode_Vo_Wo, OP_PSRLD, FLAG_NONE },
	{ "psrlq", &Instruction::decode_Vo_Wo, OP_PSRLQ, FLAG_NONE },
	{ "paddq", &Instruction::decode_Vo_Wo, OP_PADDQ, FLAG_NONE },
	{ "pmullw", &Instruction::decode_Vo_Wo, OP_PMULLW, FLAG_NONE },
	{ "movq", &Instruction::decode_Vo_Wo, OP_MOVQ, FLAG_NONE },
	{ "pmovmskb", &Instruction::decode_Gd_Uo, OP_PMOVMSKB, FLAG_NONE },
    { "psubusb", &Instruction::decode_Vo_Wo, OP_PSUBUSB, FLAG_NONE },
    { "psubusw", &Instruction::decode_Vo_Wo, OP_PSUBUSW, FLAG_NONE },
    { "pminub", &Instruction::decode_Vo_Wo, OP_PMINUB, FLAG_NONE },
    { "pand", &Instruction::decode_Vo_Wo, OP_PAND, FLAG_NONE },
    { "paddusb", &Instruction::decode_Vo_Wo, OP_PADDUSB, FLAG_NONE },
    { "paddusw", &Instruction::decode_Vo_Wo, OP_PADDUSW, FLAG_NONE },
    { "pmaxub", &Instruction::decode_Vo_Wo, OP_PMAXUB, FLAG_NONE },
    { "pandn", &Instruction::decode_Vo_Wo, OP_PANDN, FLAG_NONE },
	
	/* 0x0f 0xe0 - 0x0f 0xef */
	{ "pavgb", &Instruction::decode_Vo_Wo, OP_PAVGB, FLAG_NONE },
	{ "psraw", &Instruction::decode_Vo_Wo, OP_PSRAW, FLAG_NONE },
	{ "psrad", &Instruction::decode_Vo_Wo, OP_PSRAD, FLAG_NONE },
	{ "pavgw", &Instruction::decode_Vo_Wo, OP_PAVGW, FLAG_NONE },
	{ "pmulhuw", &Instruction::decode_Vo_Wo, OP_PMULHUW, FLAG_NONE },
	{ "pmulhw", &Instruction::decode_Vo_Wo, OP_PMULHW, FLAG_NONE },
	{ "cvttpd2dq", &Instruction::decode_Vo_Wo, OP_CVTTPD2DQ, FLAG_NONE },
	{ "movntdq", &Instruction::decode_Mo_Vo, OP_MOVNTDQ, FLAG_NONE },
	{ "psubsb", &Instruction::decode_Vo_Wo, OP_PSUBSB, FLAG_NONE },
	{ "psubsw", &Instruction::decode_Vo_Wo, OP_PSUBSW, FLAG_NONE },
	{ "pminsw", &Instruction::decode_Vo_Wo, OP_PMINSW, FLAG_NONE },
	{ "por", &Instruction::decode_Vo_Wo, OP_POR, FLAG_NONE },  
	{ "paddsb", &Instruction::decode_Vo_Wo, OP_PADDSB, FLAG_NONE },
	{ "paddsw", &Instruction::decode_Vo_Wo, OP_PADDSW, FLAG_NONE },
	{ "pmaxsw", &Instruction::decode_Vo_Wo, OP_PMAXSW, FLAG_NONE },
	{ "pxor", &Instruction::decode_Vo_Wo, OP_PXOR, FLAG_NONE },
	
	/* 0x0f 0xf0 - 0x0f 0xff */
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "psllw", &Instruction::decode_Vo_Wo, OP_PSLLW, FLAG_NONE },
	{ "pslld", &Instruction::decode_Vo_Wo, OP_PSLLD, FLAG_NONE },
	{ "psllq", &Instruction::decode_Vo_Wo, OP_PSLLQ, FLAG_NONE },
	{ "pmuludq", &Instruction::decode_Vo_Wo, OP_PMULUDQ, FLAG_NONE },
	{ "pmaddwd", &Instruction::decode_Vo_Wo, OP_PMADDWD, FLAG_NONE },
	{ "psadbw", &Instruction::decode_Vo_Wo, OP_PSADBW, FLAG_NONE },
	{ "maskmovdqu", &Instruction::decode_Vo_Uo, OP_MASKMOVDQU, FLAG_NONE },
	{ "psubb", &Instruction::decode_Vo_Wo, OP_PSUBB, FLAG_NONE },
	{ "psubw", &Instruction::decode_Vo_Wo, OP_PSUBW, FLAG_NONE },
	{ "psubd", &Instruction::decode_Vo_Wo, OP_PSUBD, FLAG_NONE },
	{ "psubq", &Instruction::decode_Vo_Wo, OP_PSUBQ, FLAG_NONE },	
	{ "paddb", &Instruction::decode_Vo_Wo, OP_PADDB, FLAG_NONE },
	{ "paddw", &Instruction::decode_Vo_Wo, OP_PADDW, FLAG_NONE },
	{ "paddd", &Instruction::decode_Vo_Wo, OP_PADDD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID }
};

// 2 byte opcodes with a f2 prefix
template <class Model>
const typename Instruction<Model>::OpcodeEntry Instruction<Model>::Opcodes_2Byte_F2[0x100] = {

	/* 0x0f 0x00 - 0x0f 0x0f */
	{ "group6", &Instruction::decode_group6, OP_GROUP6, FLAG_NONE },
	{ "group7", &Instruction::decode_group7, OP_GROUP7, FLAG_NONE },
	{ "lar", &Instruction::decode_Gv_Ew, OP_LAR, FLAG_NONE },
	{ "lsl", &Instruction::decode_Gv_Ew, OP_LSL, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "syscall", &Instruction::decode0, OP_SYSCALL, FLAG_NONE },
	{ "clts", &Instruction::decode0, OP_CLTS, FLAG_NONE },
	{ "sysret", &Instruction::decode0, OP_SYSRET, FLAG_NONE },
	{ "invd", &Instruction::decode0, OP_INVD, FLAG_NONE },
	{ "wbinvd", &Instruction::decode0, OP_WBINVD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "ud2", &Instruction::decode0, OP_UD2, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x10 - 0x0f 0x1f */
	{ "movsd", &Instruction::decode_Vo_Wo, OP_MOVSD, FLAG_NONE },
	{ "movsd", &Instruction::decode_Wo_Vo, OP_MOVSD, FLAG_NONE },
	{ "movddup", &Instruction::decode_Vq_Mq, OP_MOVDDUP, FLAG_NONE },
	{ "movlps", &Instruction::decode_Mq_Vq, OP_MOVLPS, FLAG_NONE },
	{ "unpcklps", &Instruction::decode_Vo_Wq, OP_UNPCKLPS, FLAG_NONE },
	{ "unpckhps", &Instruction::decode_Vo_Wq, OP_UNPCKHPS, FLAG_NONE },
	{ "movhps", &Instruction::decode_Vq_Mq, OP_MOVHPS, FLAG_NONE },
	{ "movhps", &Instruction::decode_Mq_Vq, OP_MOVHPS, FLAG_NONE },
	{ "group17", &Instruction::decode_group17, OP_GROUP17, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	
	/* 0x0f 0x20 - 0x0f 0x2f */
	{ "mov", &Instruction::decode_Rd_Cd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Rd_Dd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Cd_Rd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Dd_Rd, OP_MOV, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movaps", &Instruction::decode_Vo_Wo, OP_MOVAPS, FLAG_NONE },
	{ "movaps", &Instruction::decode_Wo_Vo, OP_MOVAPS, FLAG_NONE },
	{ "cvtsi2sd", &Instruction::decode_Vo_Ed, OP_CVTSI2SD, FLAG_NONE },	// x86-64: cvtsi2sd Vo, Eq
	{ "movntps",  &Instruction::decode_Mo_Vo, OP_MOVNTPS, FLAG_NONE },	
	{ "cvttsd2si",  &Instruction::decode_Gd_Wo, OP_CVTTSD2SI, FLAG_NONE },	// x86-64: cvttsd2si Gq, Wo
	{ "cvtsd2si",  &Instruction::decode_Gd_Wo, OP_CVTSD2SI, FLAG_NONE },	// x86-64: cvtsd2si Gq, Wo
	{ "ucomiss",  &Instruction::decode_Vo_Wo, OP_UCOMISS, FLAG_NONE },
	{ "comiss",  &Instruction::decode_Vo_Wo, OP_COMISS, FLAG_NONE },
	
	/* 0x0f 0x30 - 0x0f 0x3f */
	{ "wrmsr", &Instruction::decode0, OP_WRMSR, FLAG_NONE },
	{ "rdtsc", &Instruction::decode0, OP_RDTSC, FLAG_NONE },
	{ "rdmsr", &Instruction::decode0, OP_RDMSR, FLAG_NONE },
	{ "rdpmc", &Instruction::decode0, OP_RDPMC, FLAG_NONE },
	{ "sysenter", &Instruction::decode0, OP_SYSENTER, FLAG_NONE },
	{ "sysexit", &Instruction::decode0, OP_SYSEXIT, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "getsec", &Instruction::decode0, OP_GETSEC, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_38, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_3A, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x40 - 0x0f 0x4f */
	{ "cmovo", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovno", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnbe", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovs", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovns", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	
	/* 0x0f 0x50 - 0x0f 0x5f */
	{ "movmskps", &Instruction::decode_Gd_Uo, OP_MOVMSKPS, FLAG_NONE },	// x86-64: movmskps Gq, Uo
	{ "sqrtsd", &Instruction::decode_Vo_Wo, OP_SQRTSD, FLAG_NONE },
	{ "rsqrtps", &Instruction::decode_Vo_Wo, OP_RSQRTPS, FLAG_NONE },
	{ "rcpps", &Instruction::decode_Vo_Wo, OP_RCPPS, FLAG_NONE },
	{ "andps", &Instruction::decode_Vo_Wo, OP_ANDPS, FLAG_NONE },
	{ "andnps", &Instruction::decode_Vo_Wo, OP_ANDNPS, FLAG_NONE },
	{ "orps", &Instruction::decode_Vo_Wo, OP_ORPS, FLAG_NONE },
	{ "xorps", &Instruction::decode_Vo_Wo, OP_XORPS, FLAG_NONE },
	{ "addsd", &Instruction::decode_Vo_Wo, OP_ADDSD, FLAG_NONE },
	{ "mulsd", &Instruction::decode_Vo_Wo, OP_MULSD, FLAG_NONE },
	{ "cvtsd2ss", &Instruction::decode_Vo_Wo, OP_CVTSD2SS, FLAG_NONE },
	{ "cvtdq2ps", &Instruction::decode_Vo_Wo, OP_CVTDQ2PS, FLAG_NONE },
	{ "subsd", &Instruction::decode_Vo_Wo, OP_SUBSD, FLAG_NONE },
	{ "minsd", &Instruction::decode_Vo_Wo, OP_MINSD, FLAG_NONE },
	{ "divsd", &Instruction::decode_Vo_Wo, OP_DIVSD, FLAG_NONE },
	{ "maxsd", &Instruction::decode_Vo_Wo, OP_MAXSD, FLAG_NONE },
	
	/* 0x0f 0x60 - 0x0f 0x6f */
	{ "punpcklbw", &Instruction::decode_Pq_Qd, OP_PUNPCKLBW, FLAG_NONE },
	{ "punpcklwd", &Instruction::decode_Pq_Qd, OP_PUNPCKLWD, FLAG_NONE },
	{ "punpckldq", &Instruction::decode_Pq_Qd, OP_PUNPCKLDQ, FLAG_NONE },
	{ "packsswb", &Instruction::decode_Pq_Qq, OP_PACKSSWB, FLAG_NONE },
	{ "pcmpgtb", &Instruction::decode_Pq_Qq, OP_PCMPGTB, FLAG_NONE },
	{ "pcmpgtw", &Instruction::decode_Pq_Qq, OP_PCMPGTW, FLAG_NONE },
	{ "pcmpgtd", &Instruction::decode_Pq_Qq, OP_PCMPGTD, FLAG_NONE },
	{ "packuswb", &Instruction::decode_Pq_Qq, OP_PACKUSWB, FLAG_NONE },
	{ "punpckhbw", &Instruction::decode_Pq_Qd, OP_PUNPCKHBW, FLAG_NONE },
	{ "punpckhwd", &Instruction::decode_Pq_Qd, OP_PUNPCKHWD, FLAG_NONE },
	{ "punpckhdq", &Instruction::decode_Pq_Qd, OP_PUNPCKHDQ, FLAG_NONE },
	{ "packssdw", &Instruction::decode_Pq_Qq, OP_PACKSSDW, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movd", &Instruction::decode_Pd_Ed, OP_MOVD, FLAG_NONE },		// x86-64: movq Pd, Eq
	{ "movq", &Instruction::decode_Pq_Qq, OP_MOVQ, FLAG_NONE },
	
	/* 0x0f 0x70 - 0x0f 0x7f */
	{ "pshuflw", &Instruction::decode_Vo_Wo_Ib, OP_PSHUFLW, FLAG_NONE },
	{ "group13", &Instruction::decode_group13, OP_GROUP13, FLAG_NONE },
	{ "group14", &Instruction::decode_group14, OP_GROUP14, FLAG_NONE },
	{ "group15", &Instruction::decode_group15, OP_GROUP15, FLAG_NONE },
	{ "pcmpeqb", &Instruction::decode_Pq_Qq, OP_PCMPEQB, FLAG_NONE },
	{ "pcmpeqw", &Instruction::decode_Pq_Qq, OP_PCMPEQW, FLAG_NONE },
	{ "pcmpeqd", &Instruction::decode_Pq_Qq, OP_PCMPEQD, FLAG_NONE },
	{ "emms", &Instruction::decode0, OP_EMMS, FLAG_NONE },
	{ "vmread", &Instruction::decode_Ed_Gd, OP_VMREAD, FLAG_NONE },	// x86-64: vmread Eq, Gq
	{ "vmwrite", &Instruction::decode_Gd_Ed, OP_VMWRITE, FLAG_NONE },	// x86-64: vmwrite Gq, Eq
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "haddps", &Instruction::decode_Vo_Wo, OP_HADDPS, FLAG_NONE },
	{ "hsubps", &Instruction::decode_Vo_Wo, OP_HSUBPS, FLAG_NONE },
	{ "movd", &Instruction::decode_Ed_Pd, OP_MOVD, FLAG_NONE },		// x86-64: movq Eq,Pd
	{ "movq", &Instruction::decode_Qq_Pq, OP_MOVQ, FLAG_NONE },
	
	/* 0x0f 0x80 - 0x0f 0x8f */
	{ "jo", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jno", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "js", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jns", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	
	/* 0x0f 0x90 - 0x0f 0x9f */
	{ "seto", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setno", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "sets", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setns", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	
	/* 0x0f 0xa0 - 0x0f 0xaf */
	{ "push", &Instruction::decode_SegFS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegFS, OP_POP, FLAG_NONE },
	{ "cpuid", &Instruction::decode0, OP_CPUID, FLAG_NONE },
	{ "bt", &Instruction::decode_Ev_Gv, OP_BT, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_Ib, OP_SHLD, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_CL, OP_SHLD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "push", &Instruction::decode_SegGS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegGS, OP_POP, FLAG_NONE },
	{ "rsm", &Instruction::decode0, OP_RSM, FLAG_NONE },
	{ "bts", &Instruction::decode_Ev_Gv, OP_BTS, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_Ib, OP_SHRD, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_CL, OP_SHRD, FLAG_NONE },
	{ "group16", &Instruction::decode_group16, OP_GROUP16, FLAG_NONE },
	{ "imul",  &Instruction::decode_Gv_Ev, OP_IMUL, FLAG_NONE },
	
	/* 0x0f 0xb0 - 0x0f 0xbf */
	{ "cmpxchg", &Instruction::decode_Eb_Gb, OP_CMPXCHG, FLAG_NONE },
	{ "cmpxchg", &Instruction::decode_Ev_Gv, OP_CMPXCHG, FLAG_NONE },
	{ "lss", &Instruction::decode_Gv_Mp, OP_LSS, FLAG_NONE },
	{ "btr", &Instruction::decode_Ev_Gv, OP_BTR, FLAG_NONE },
	{ "lfs", &Instruction::decode_Gv_Mp, OP_LFS, FLAG_NONE },
	{ "lgs", &Instruction::decode_Gv_Mp, OP_LGS, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Eb, OP_MOVZX, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Ew, OP_MOVZX, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "group11", &Instruction::decode_group11, OP_GROUP11, FLAG_NONE },
	{ "group8", &Instruction::decode_group8, OP_GROUP8, FLAG_NONE },
	{ "btc", &Instruction::decode_Ev_Gv, OP_BTC, FLAG_NONE },
	{ "bsf", &Instruction::decode_Gv_Ev, OP_BSF, FLAG_NONE },
	{ "bsr", &Instruction::decode_Gv_Ev, OP_BSR, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Eb, OP_MOVSX, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Ew, OP_MOVSX, FLAG_NONE },
	
	/* 0x0f 0xc0 - 0x0f 0xcf */
	{ "xadd", &Instruction::decode_Eb_Gb, OP_XADD, FLAG_NONE },
	{ "xadd", &Instruction::decode_Ev_Gv, OP_XADD, FLAG_NONE },
	{ "cmpsd", &Instruction::decode_Vo_Wo_Ib, OP_CMPSD, FLAG_NONE },
	{ "movnti", &Instruction::decode_Md_Gd, OP_MOVNTI, FLAG_NONE },	// x86-64: movnti Nq, Gq
	{ "pinsrw", &Instruction::decode_Pq_Rd_Mw_Ib, OP_PINSRW, FLAG_NONE },	// x86-64: pinsrw Pq, Rq/Mw,Ib
	{ "pextrw", &Instruction::decode_Gd_Nq_Ib, OP_PEXTRW, FLAG_NONE },
	{ "shufps", &Instruction::decode_Vo_Wo_Ib, OP_SHUFPS, FLAG_NONE },
	{ "group9", &Instruction::decode_group9, OP_GROUP9, FLAG_NONE },
	{ "bswap", &Instruction::decode_rAX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rCX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSI, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDI, OP_BSWAP, FLAG_NONE },
	
	/* 0x0f 0xd0 - 0x0f 0xdf */
	{ "addsubps", &Instruction::decode_Vo_Wo, OP_ADDSUBPS, FLAG_NONE },
	{ "psrlw", &Instruction::decode_Pq_Qq, OP_PSRLW, FLAG_NONE },
	{ "psrld", &Instruction::decode_Pq_Qq, OP_PSRLD, FLAG_NONE },
	{ "psrlq", &Instruction::decode_Pq_Qq, OP_PSRLQ, FLAG_NONE },
	{ "paddq", &Instruction::decode_Pq_Qq, OP_PADDQ, FLAG_NONE },
	{ "pmullw", &Instruction::decode_Pq_Qq, OP_PMULLW, FLAG_NONE },
	{ "movdq2q", &Instruction::decode_Pq_Qq, OP_MOVDQ2Q, FLAG_NONE },
	{ "pmovmskb", &Instruction::decode_Gd_Nq, OP_PMOVMSKB, FLAG_NONE },
    { "psubusb", &Instruction::decode_Pq_Qq, OP_PSUBUSB, FLAG_NONE },
    { "psubusw", &Instruction::decode_Pq_Qq, OP_PSUBUSW, FLAG_NONE },
    { "pminub", &Instruction::decode_Pq_Qq, OP_PMINUB, FLAG_NONE },
    { "pand", &Instruction::decode_Pq_Qq, OP_PAND, FLAG_NONE },
    { "paddusb", &Instruction::decode_Pq_Qq, OP_PADDUSB, FLAG_NONE },
    { "paddusw", &Instruction::decode_Pq_Qq, OP_PADDUSW, FLAG_NONE },
    { "pmaxub", &Instruction::decode_Pq_Qq, OP_PMAXUB, FLAG_NONE },
    { "pandn", &Instruction::decode_Pq_Qq, OP_PANDN, FLAG_NONE },
	
	/* 0x0f 0xe0 - 0x0f 0xef */
	{ "pavgb", &Instruction::decode_Pq_Qq, OP_PAVGB, FLAG_NONE },
	{ "psraw", &Instruction::decode_Pq_Qq, OP_PSRAW, FLAG_NONE },
	{ "psrad", &Instruction::decode_Pq_Qq, OP_PSRAD, FLAG_NONE },
	{ "pavgw", &Instruction::decode_Pq_Qq, OP_PAVGW, FLAG_NONE },
	{ "pmulhuw", &Instruction::decode_Pq_Qq, OP_PMULHUW, FLAG_NONE },
	{ "pmulhw", &Instruction::decode_Pq_Qq, OP_PMULHW, FLAG_NONE },
	{ "cvtpd2dq", &Instruction::decode_Vo_Wo, OP_CVTPD2DQ, FLAG_NONE },
	{ "movntq", &Instruction::decode_Mq_Pq, OP_MOVNTQ, FLAG_NONE },
	{ "psubsb", &Instruction::decode_Pq_Qq, OP_PSUBSB, FLAG_NONE },
	{ "psubsw", &Instruction::decode_Pq_Qq, OP_PSUBSW, FLAG_NONE },
	{ "pminsw", &Instruction::decode_Pq_Qq, OP_PMINSW, FLAG_NONE },
	{ "por", &Instruction::decode_Pq_Qq, OP_POR, FLAG_NONE },  
	{ "paddsb", &Instruction::decode_Pq_Qq, OP_PADDSB, FLAG_NONE },
	{ "paddsw", &Instruction::decode_Pq_Qq, OP_PADDSW, FLAG_NONE },
	{ "pmaxsw", &Instruction::decode_Pq_Qq, OP_PMAXSW, FLAG_NONE },
	{ "pxor", &Instruction::decode_Pq_Qq, OP_PXOR, FLAG_NONE },
	
	/* 0x0f 0xf0 - 0x0f 0xff */
	{ "lddqu", &Instruction::decode_Vo_Mo, OP_LDDQU, FLAG_NONE },
	{ "psllw", &Instruction::decode_Pq_Qq, OP_PSLLW, FLAG_NONE },
	{ "pslld", &Instruction::decode_Pq_Qq, OP_PSLLD, FLAG_NONE },
	{ "psllq", &Instruction::decode_Pq_Qq, OP_PSLLQ, FLAG_NONE },
	{ "pmuludq", &Instruction::decode_Pq_Qq, OP_PMULUDQ, FLAG_NONE },
	{ "pmaddwd", &Instruction::decode_Pq_Qq, OP_PMADDWD, FLAG_NONE },
	{ "psadbw", &Instruction::decode_Pq_Qq, OP_PSADBW, FLAG_NONE },
	{ "maskmovq", &Instruction::decode_Pq_Nq, OP_MASKMOVQ, FLAG_NONE },
	{ "psubb", &Instruction::decode_Pq_Qq, OP_PSUBB, FLAG_NONE },
	{ "psubw", &Instruction::decode_Pq_Qq, OP_PSUBW, FLAG_NONE },
	{ "psubd", &Instruction::decode_Pq_Qq, OP_PSUBD, FLAG_NONE },
	{ "psubq", &Instruction::decode_Pq_Qq, OP_PSUBQ, FLAG_NONE },	
	{ "paddb", &Instruction::decode_Pq_Qq, OP_PADDB, FLAG_NONE },
	{ "paddw", &Instruction::decode_Pq_Qq, OP_PADDW, FLAG_NONE },
	{ "paddd", &Instruction::decode_Pq_Qq, OP_PADDD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID }
};

// 2 byte opcodes with a f3 prefix
template <class Model>
const typename Instruction<Model>::OpcodeEntry Instruction<Model>::Opcodes_2Byte_F3[0x100] = {

	/* 0x0f 0x00 - 0x0f 0x0f */
	{ "group6", &Instruction::decode_group6, OP_GROUP6, FLAG_NONE },
	{ "group7", &Instruction::decode_group7, OP_GROUP7, FLAG_NONE },
	{ "lar", &Instruction::decode_Gv_Ew, OP_LAR, FLAG_NONE },
	{ "lsl", &Instruction::decode_Gv_Ew, OP_LSL, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "syscall", &Instruction::decode0, OP_SYSCALL, FLAG_NONE },
	{ "clts", &Instruction::decode0, OP_CLTS, FLAG_NONE },
	{ "sysret", &Instruction::decode0, OP_SYSRET, FLAG_NONE },
	{ "invd", &Instruction::decode0, OP_INVD, FLAG_NONE },
	{ "wbinvd", &Instruction::decode0, OP_WBINVD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "ud2", &Instruction::decode0, OP_UD2, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x10 - 0x0f 0x1f */
	{ "movss", &Instruction::decode_Vo_Wo, OP_MOVSS, FLAG_NONE },
	{ "movss", &Instruction::decode_Wo_Vo, OP_MOVSS, FLAG_NONE },
	{ "movsldup", &Instruction::decode_Vq_Wq, OP_MOVSLDUP, FLAG_NONE },
	{ "movlps", &Instruction::decode_Mq_Vq, OP_MOVLPS, FLAG_NONE },
	{ "unpcklps", &Instruction::decode_Vo_Wq, OP_UNPCKLPS, FLAG_NONE },
	{ "unpckhps", &Instruction::decode_Vo_Wq, OP_UNPCKHPS, FLAG_NONE },
	{ "movshdup", &Instruction::decode_Vq_Wq, OP_MOVSHDUP, FLAG_NONE },
	{ "movhps", &Instruction::decode_Mq_Vq, OP_MOVHPS, FLAG_NONE },
	{ "group17", &Instruction::decode_group17, OP_GROUP17, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "nop", &Instruction::decode_Ev, OP_NOP, FLAG_NONE },
	
	/* 0x0f 0x20 - 0x0f 0x2f */
	{ "mov", &Instruction::decode_Rd_Cd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Rd_Dd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Cd_Rd, OP_MOV, FLAG_NONE },
	{ "mov", &Instruction::decode_Dd_Rd, OP_MOV, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movaps", &Instruction::decode_Vo_Wo, OP_MOVAPS, FLAG_NONE },
	{ "movaps", &Instruction::decode_Wo_Vo, OP_MOVAPS, FLAG_NONE },
	{ "cvtsi2ss", &Instruction::decode_Vo_Ed, OP_CVTSI2SS, FLAG_NONE },	// x86-64: cvtsi2ss Vo, Eq
	{ "movntps",  &Instruction::decode_Mo_Vo, OP_MOVNTPS, FLAG_NONE },	
	{ "cvttss2si",  &Instruction::decode_Gd_Wo, OP_CVTTSS2SI, FLAG_NONE },	// x86-64: cvttss2si Gq, Wo
	{ "cvtss2si",  &Instruction::decode_Gd_Wo, OP_CVTSS2SI, FLAG_NONE },	// x86-64: cvtss2si Gq, Wo
	{ "ucomiss",  &Instruction::decode_Vo_Wo, OP_UCOMISS, FLAG_NONE },
	{ "comiss",  &Instruction::decode_Vo_Wo, OP_COMISS, FLAG_NONE },
	
	/* 0x0f 0x30 - 0x0f 0x3f */
	{ "wrmsr", &Instruction::decode0, OP_WRMSR, FLAG_NONE },
	{ "rdtsc", &Instruction::decode0, OP_RDTSC, FLAG_NONE },
	{ "rdmsr", &Instruction::decode0, OP_RDMSR, FLAG_NONE },
	{ "rdpmc", &Instruction::decode0, OP_RDPMC, FLAG_NONE },
	{ "sysenter", &Instruction::decode0, OP_SYSENTER, FLAG_NONE },
	{ "sysexit", &Instruction::decode0, OP_SYSEXIT, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "getsec", &Instruction::decode0, OP_GETSEC, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_38, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "3byte", &Instruction::decode_3byte_3A, OP_3BYTE, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	
	/* 0x0f 0x40 - 0x0f 0x4f */
	{ "cmovo", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovno", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnz", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovb", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnbe", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovs", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovns", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnp", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnl", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	{ "cmovnle", &Instruction::decode_Gv_Ev, OP_CMOVCC, FLAG_NONE },
	
	/* 0x0f 0x50 - 0x0f 0x5f */
	{ "movmskps", &Instruction::decode_Gd_Uo, OP_MOVMSKPS, FLAG_NONE },	// x86-64: movmskps Gq, Uo
	{ "sqrtss", &Instruction::decode_Vo_Wo, OP_SQRTSS, FLAG_NONE },
	{ "rsqrtss", &Instruction::decode_Vo_Wo, OP_RSQRTSS, FLAG_NONE },
	{ "rcpss", &Instruction::decode_Vo_Wo, OP_RCPSS, FLAG_NONE },
	{ "andps", &Instruction::decode_Vo_Wo, OP_ANDPS, FLAG_NONE },
	{ "andnps", &Instruction::decode_Vo_Wo, OP_ANDNPS, FLAG_NONE },
	{ "orps", &Instruction::decode_Vo_Wo, OP_ORPS, FLAG_NONE },
	{ "xorps", &Instruction::decode_Vo_Wo, OP_XORPS, FLAG_NONE },
	{ "addss", &Instruction::decode_Vo_Wo, OP_ADDSS, FLAG_NONE },
	{ "mulss", &Instruction::decode_Vo_Wo, OP_MULSS, FLAG_NONE },
	{ "cvtss2sd", &Instruction::decode_Vo_Wo, OP_CVTSS2SD, FLAG_NONE },
	{ "cvttps2dq", &Instruction::decode_Vo_Wo, OP_CVTTPS2DQ, FLAG_NONE },
	{ "subss", &Instruction::decode_Vo_Wo, OP_SUBSS, FLAG_NONE },
	{ "minss", &Instruction::decode_Vo_Wo, OP_MINSS, FLAG_NONE },
	{ "divss", &Instruction::decode_Vo_Wo, OP_DIVSS, FLAG_NONE },
	{ "maxss", &Instruction::decode_Vo_Wo, OP_MAXSS, FLAG_NONE },
	
	/* 0x0f 0x60 - 0x0f 0x6f */
	{ "punpcklbw", &Instruction::decode_Pq_Qd, OP_PUNPCKLBW, FLAG_NONE },
	{ "punpcklwd", &Instruction::decode_Pq_Qd, OP_PUNPCKLWD, FLAG_NONE },
	{ "punpckldq", &Instruction::decode_Pq_Qd, OP_PUNPCKLDQ, FLAG_NONE },
	{ "packsswb", &Instruction::decode_Pq_Qq, OP_PACKSSWB, FLAG_NONE },
	{ "pcmpgtb", &Instruction::decode_Pq_Qq, OP_PCMPGTB, FLAG_NONE },
	{ "pcmpgtw", &Instruction::decode_Pq_Qq, OP_PCMPGTW, FLAG_NONE },
	{ "pcmpgtd", &Instruction::decode_Pq_Qq, OP_PCMPGTD, FLAG_NONE },
	{ "packuswb", &Instruction::decode_Pq_Qq, OP_PACKUSWB, FLAG_NONE },
	{ "punpckhbw", &Instruction::decode_Pq_Qd, OP_PUNPCKHBW, FLAG_NONE },
	{ "punpckhwd", &Instruction::decode_Pq_Qd, OP_PUNPCKHWD, FLAG_NONE },
	{ "punpckhdq", &Instruction::decode_Pq_Qd, OP_PUNPCKHDQ, FLAG_NONE },
	{ "packssdw", &Instruction::decode_Pq_Qq, OP_PACKSSDW, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movd", &Instruction::decode_Pd_Ed, OP_MOVD, FLAG_NONE },		// x86-64: movq Pd, Eq
	{ "movdqu", &Instruction::decode_Vo_Wo, OP_MOVDQU, FLAG_NONE },
	
	/* 0x0f 0x70 - 0x0f 0x7f */
	{ "pshufhw", &Instruction::decode_Vo_Wo_Ib, OP_PSHUFHW, FLAG_NONE },
	{ "group13", &Instruction::decode_group13, OP_GROUP13, FLAG_NONE },
	{ "group14", &Instruction::decode_group14, OP_GROUP14, FLAG_NONE },
	{ "group15", &Instruction::decode_group15, OP_GROUP15, FLAG_NONE },
	{ "pcmpeqb", &Instruction::decode_Pq_Qq, OP_PCMPEQB, FLAG_NONE },
	{ "pcmpeqw", &Instruction::decode_Pq_Qq, OP_PCMPEQW, FLAG_NONE },
	{ "pcmpeqd", &Instruction::decode_Pq_Qq, OP_PCMPEQD, FLAG_NONE },
	{ "emms", &Instruction::decode0, OP_EMMS, FLAG_NONE },
	{ "vmread", &Instruction::decode_Ed_Gd, OP_VMREAD, FLAG_NONE },	// x86-64: vmread Eq, Gq
	{ "vmwrite", &Instruction::decode_Gd_Ed, OP_VMWRITE, FLAG_NONE },	// x86-64: vmwrite Gq, Eq
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "movq", &Instruction::decode_Vq_Wq, OP_MOVQ, FLAG_NONE },
	{ "movdqu", &Instruction::decode_Wo_Vo, OP_MOVDQU, FLAG_NONE },
	
	/* 0x0f 0x80 - 0x0f 0x8f */
	{ "jo", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jno", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnb", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnz", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnbe", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "js", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jns", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnp", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnl", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	{ "jnle", &Instruction::decode_Jz, OP_JCC, FLAG_NONE },
	
	/* 0x0f 0x90 - 0x0f 0x9f */
	{ "seto", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setno", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnb", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnz", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnbe", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "sets", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setns", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnp", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnl", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	{ "setnle", &Instruction::decode_Eb, OP_SETCC, FLAG_NONE },
	
	/* 0x0f 0xa0 - 0x0f 0xaf */
	{ "push", &Instruction::decode_SegFS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegFS, OP_POP, FLAG_NONE },
	{ "cpuid", &Instruction::decode0, OP_CPUID, FLAG_NONE },
	{ "bt", &Instruction::decode_Ev_Gv, OP_BT, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_Ib, OP_SHLD, FLAG_NONE },
	{ "shld", &Instruction::decode_Ev_Gv_CL, OP_SHLD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "push", &Instruction::decode_SegGS, OP_PUSH, FLAG_NONE },
	{ "pop", &Instruction::decode_SegGS, OP_POP, FLAG_NONE },
	{ "rsm", &Instruction::decode0, OP_RSM, FLAG_NONE },
	{ "bts", &Instruction::decode_Ev_Gv, OP_BTS, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_Ib, OP_SHRD, FLAG_NONE },
	{ "shrd", &Instruction::decode_Ev_Gv_CL, OP_SHRD, FLAG_NONE },
	{ "group16", &Instruction::decode_group16, OP_GROUP16, FLAG_NONE },
	{ "imul",  &Instruction::decode_Gv_Ev, OP_IMUL, FLAG_NONE },
	
	/* 0x0f 0xb0 - 0x0f 0xbf */
	{ "cmpxchg", &Instruction::decode_Eb_Gb, OP_CMPXCHG, FLAG_NONE },
	{ "cmpxchg", &Instruction::decode_Ev_Gv, OP_CMPXCHG, FLAG_NONE },
	{ "lss", &Instruction::decode_Gv_Mp, OP_LSS, FLAG_NONE },
	{ "btr", &Instruction::decode_Ev_Gv, OP_BTR, FLAG_NONE },
	{ "lfs", &Instruction::decode_Gv_Mp, OP_LFS, FLAG_NONE },
	{ "lgs", &Instruction::decode_Gv_Mp, OP_LGS, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Eb, OP_MOVZX, FLAG_NONE },
	{ "movzx", &Instruction::decode_Gv_Ew, OP_MOVZX, FLAG_NONE },
	{ "popcnt", &Instruction::decode_Gv_Ev, OP_POPCNT, FLAG_NONE },
	{ "group11", &Instruction::decode_group11, OP_GROUP11, FLAG_NONE },
	{ "group8", &Instruction::decode_group8, OP_GROUP8, FLAG_NONE },
	{ "btc", &Instruction::decode_Ev_Gv, OP_BTC, FLAG_NONE },
	{ "bsf", &Instruction::decode_Gv_Ev, OP_BSF, FLAG_NONE },
	{ "bsr", &Instruction::decode_Gv_Ev, OP_BSR, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Eb, OP_MOVSX, FLAG_NONE },
	{ "movsx", &Instruction::decode_Gv_Ew, OP_MOVSX, FLAG_NONE },
	
	/* 0x0f 0xc0 - 0x0f 0xcf */
	{ "xadd", &Instruction::decode_Eb_Gb, OP_XADD, FLAG_NONE },
	{ "xadd", &Instruction::decode_Ev_Gv, OP_XADD, FLAG_NONE },
	{ "cmpss", &Instruction::decode_Vo_Wo_Ib, OP_CMPSS, FLAG_NONE },
	{ "movnti", &Instruction::decode_Md_Gd, OP_MOVNTI, FLAG_NONE },	// x86-64: movnti Nq, Gq
	{ "pinsrw", &Instruction::decode_Pq_Rd_Mw_Ib, OP_PINSRW, FLAG_NONE },	// x86-64: pinsrw Pq, Rq/Mw,Ib
	{ "pextrw", &Instruction::decode_Gd_Nq_Ib, OP_PEXTRW, FLAG_NONE },
	{ "shufps", &Instruction::decode_Vo_Wo_Ib, OP_SHUFPS, FLAG_NONE },
	{ "group9", &Instruction::decode_group9, OP_GROUP9, FLAG_NONE },
	{ "bswap", &Instruction::decode_rAX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rCX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBX, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rBP, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rSI, OP_BSWAP, FLAG_NONE },
	{ "bswap", &Instruction::decode_rDI, OP_BSWAP, FLAG_NONE },
	
	/* 0x0f 0xd0 - 0x0f 0xdf */
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "psrlw", &Instruction::decode_Pq_Qq, OP_PSRLW, FLAG_NONE },
	{ "psrld", &Instruction::decode_Pq_Qq, OP_PSRLD, FLAG_NONE },
	{ "psrlq", &Instruction::decode_Pq_Qq, OP_PSRLQ, FLAG_NONE },
	{ "paddq", &Instruction::decode_Pq_Qq, OP_PADDQ, FLAG_NONE },
	{ "pmullw", &Instruction::decode_Pq_Qq, OP_PMULLW, FLAG_NONE },
	{ "movq2dq", &Instruction::decode_Vo_Nq, OP_MOVQ2DQ, FLAG_NONE },
	{ "pmovmskb", &Instruction::decode_Gd_Nq, OP_PMOVMSKB, FLAG_NONE },
    { "psubusb", &Instruction::decode_Pq_Qq, OP_PSUBUSB, FLAG_NONE },
    { "psubusw", &Instruction::decode_Pq_Qq, OP_PSUBUSW, FLAG_NONE },
    { "pminub", &Instruction::decode_Pq_Qq, OP_PMINUB, FLAG_NONE },
    { "pand", &Instruction::decode_Pq_Qq, OP_PAND, FLAG_NONE },
    { "paddusb", &Instruction::decode_Pq_Qq, OP_PADDUSB, FLAG_NONE },
    { "paddusw", &Instruction::decode_Pq_Qq, OP_PADDUSW, FLAG_NONE },
    { "pmaxub", &Instruction::decode_Pq_Qq, OP_PMAXUB, FLAG_NONE },
    { "pandn", &Instruction::decode_Pq_Qq, OP_PANDN, FLAG_NONE },
	
	/* 0x0f 0xe0 - 0x0f 0xef */
	{ "pavgb", &Instruction::decode_Pq_Qq, OP_PAVGB, FLAG_NONE },
	{ "psraw", &Instruction::decode_Pq_Qq, OP_PSRAW, FLAG_NONE },
	{ "psrad", &Instruction::decode_Pq_Qq, OP_PSRAD, FLAG_NONE },
	{ "pavgw", &Instruction::decode_Pq_Qq, OP_PAVGW, FLAG_NONE },
	{ "pmulhuw", &Instruction::decode_Pq_Qq, OP_PMULHUW, FLAG_NONE },
	{ "pmulhw", &Instruction::decode_Pq_Qq, OP_PMULHW, FLAG_NONE },
	{ "cvtdq2pd", &Instruction::decode_Vo_Wo, OP_CVTDQ2PD, FLAG_NONE },
	{ "movntq", &Instruction::decode_Mq_Pq, OP_MOVNTQ, FLAG_NONE },
	{ "psubsb", &Instruction::decode_Pq_Qq, OP_PSUBSB, FLAG_NONE },
	{ "psubsw", &Instruction::decode_Pq_Qq, OP_PSUBSW, FLAG_NONE },
	{ "pminsw", &Instruction::decode_Pq_Qq, OP_PMINSW, FLAG_NONE },
	{ "por", &Instruction::decode_Pq_Qq, OP_POR, FLAG_NONE },  
	{ "paddsb", &Instruction::decode_Pq_Qq, OP_PADDSB, FLAG_NONE },
	{ "paddsw", &Instruction::decode_Pq_Qq, OP_PADDSW, FLAG_NONE },
	{ "pmaxsw", &Instruction::decode_Pq_Qq, OP_PMAXSW, FLAG_NONE },
	{ "pxor", &Instruction::decode_Pq_Qq, OP_PXOR, FLAG_NONE },
	
	/* 0x0f 0xf0 - 0x0f 0xff */
	{ "invalid", &Instruction::decode_invalid, OP_INVALID, FLAG_NONE },
	{ "psllw", &Instruction::decode_Pq_Qq, OP_PSLLW, FLAG_NONE },
	{ "pslld", &Instruction::decode_Pq_Qq, OP_PSLLD, FLAG_NONE },
	{ "psllq", &Instruction::decode_Pq_Qq, OP_PSLLQ, FLAG_NONE },
	{ "pmuludq", &Instruction::decode_Pq_Qq, OP_PMULUDQ, FLAG_NONE },
	{ "pmaddwd", &Instruction::decode_Pq_Qq, OP_PMADDWD, FLAG_NONE },
	{ "psadbw", &Instruction::decode_Pq_Qq, OP_PSADBW, FLAG_NONE },
	{ "maskmovq", &Instruction::decode_Pq_Nq, OP_MASKMOVQ, FLAG_NONE },
	{ "psubb", &Instruction::decode_Pq_Qq, OP_PSUBB, FLAG_NONE },
	{ "psubw", &Instruction::decode_Pq_Qq, OP_PSUBW, FLAG_NONE },
	{ "psubd", &Instruction::decode_Pq_Qq, OP_PSUBD, FLAG_NONE },
	{ "psubq", &Instruction::decode_Pq_Qq, OP_PSUBQ, FLAG_NONE },	
	{ "paddb", &Instruction::decode_Pq_Qq, OP_PADDB, FLAG_NONE },
	{ "paddw", &Instruction::decode_Pq_Qq, OP_PADDW, FLAG_NONE },
	{ "paddd", &Instruction::decode_Pq_Qq, OP_PADDD, FLAG_NONE },
	{ "invalid", &Instruction::decode_invalid, OP_INVALID }
};

#endif
